#!/bin/bash -i

print_help () {

	echo -e "Usage: netnsctl [options] <command> <command arguments>\n"
	
	echo "Options: "
	echo "-v   Show verbose output of netnsctl"
	echo "-h   Show this help menu"

	echo -e "\nCommands:"
	echo "add <netns name>                           Create a new network namespace with name <netns name>"
	echo ""
	echo "assign <network interface> <netns name>    Assign specified interface to the specified namespace"
	echo ""
	echo "switch <netns name>                        Starts a new shell in the specified namespace"
	echo ""
	echo "show <netns name>                          Lists interfaces in the specified namespace"
	echo ""
	echo "delete <netns name>                        Deletes the namespace and puts interfaces in default namespace"
}

print_verbose () {

	if [ "$VERBOSE" == true ];then
		echo $1
	fi
}


add_netns () {
	netns=$1
	print_verbose "Adding netns $netns"

	sudo ip netns add $netns
}

assign_netns () {
	iface=$1
	netns=$2
	print_verbose "Assigning $iface to $netns"

	sudo ip link set dev $iface netns $netns
	sudo ip netns exec $netns ip link set $iface up
}

switch_netns () {
	netns=$1
	print_verbose "Switching to namespace $netns"

	newPS1=$(echo $PS1 | sed 's,\\h,\\h_'"$netns"',g') # add netns to existing PS1
	newPS1=$newPS1" "   # sed for some reason removes the leading whitespace. Restore it.

	curr_user=$USER
	orig_bashrc=$HOME/.bashrc
	new_bashrc=$orig_bashrc.netnsctl

	cp $orig_bashrc $new_bashrc  # Make a copy of current .bashrc

	# Add following lines to the copy
	echo -e "\n\n## Added by netnsctl" >> $new_bashrc
	echo "PS1=\"$newPS1\"" >> $new_bashrc


	# TO-DO: when we need to preserve the current environment variables (use --perserve-env after sudo)
	# sudo env PS1="$newPS1" ip netns exec $netns sudo -u $curr_user bash --norc
	sudo ip netns exec $netns sudo -u $curr_user bash --rcfile $new_bashrc

}

show_netns () {
	netns=$1
	print_verbose "Showing details for namespace $netns"

	# ip netns list   <--- to list all active netns

	ifaces=( $(sudo ip netns exec $netns ip addr list | awk -F': ' '/^[0-9]/ {print $2}') )

	echo "$netns:"

	for iface in ${ifaces[@]}; do
		echo "    - $iface"
	done
}

delete_netns () {
	netns=$1
	print_verbose "Deleting netns $netns"

	decision="y"

	echo "WARNING: Deleting namespace $netns will kill all processes associated with the namespace"
	read -p "Do you want to continue? (y/n) [y]:" decision

	if [ "$decision" == "n" ] || [ "$decision" == "N" ];then
		exit 0
	fi

	print_verbose "Decision was to continue"

	sudo sh -c "ip netns pids $netns | xargs kill -9"

	sudo ip netns del $netns

}


while getopts ":vh" opt; do
  case ${opt} in
    v ) 
      	VERBOSE=true
      	;;
    h ) 
    	print_help
    	exit 0
      	;;
    \? ) 
		echo "Invalid Option: -$OPTARG" 1>&2
		print_help
      	;;
  esac
done
shift $((OPTIND -1))

print_verbose "Finished opt parsing"

subcommand=$1
shift

case $subcommand in 
	add)
		if [ "$1" == "" ];then
			echo "Provide a namespace name to create"
			exit 1
		fi
		netns=$1
		add_netns $netns
		;;
	assign)
		if [ "$1" == "" ] || [ "$2" == "" ];then
			echo "Provide both interface name and the namespace to add to"
			exit 1
		fi
		iface=$1
		netns=$2
		assign_netns $iface $netns
		;;
	switch)
		if [ "$1" == "" ];then
			echo "Provide a namespace name to switch to"
			exit 1
		fi
		netns=$1
		switch_netns $netns
		;;
	show)
		if [ "$1" == "" ];then
			echo "Provide a namespace name to show the details about it"
			exit 1
		fi
		netns=$1
		show_netns $netns
		;;
	delete)
		if [ "$1" == "" ];then
			echo "Provide a namespace name to delete"
			exit 1
		fi
		netns=$1
		delete_netns $netns
		;; 
	*)
		echo "Unknown command $subcommand"
		;;
esac

		

# if [ $# -ne 1 ];then
#     print_help
#     exit 1
# fi

exit 1