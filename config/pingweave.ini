; Each agent node (1) receives/send a pinglist and address information
; and (2) send/collect and process the ping results.
; Note that this configuration file is not applied in runtime EXCEPT the control host address.
; That said, only the controller (pingweave_ctrl.py) runs or is terminated once we 
; change the "host" field. Other values must not be changed during runtime.
[controller]
; host address of controller
host = 10.200.200.3
; webserver for plots, fetch a pinglist.yaml (/pinglist) and RDMA addresses (/address_store)
control_port = 20118
; port to collect ping results & alarms or other semantics using http
collect_port_http = 24704
; port to collect ONLY ping results using zmq
collect_port_zmq = 24705

; parameters used by agent for communication with controller
; Note that parameters is not updated in runtime, it must be pre-defined
[param]
; speed that server reads local file - config/pinglist.yaml (default: 10 seconds)
interval_read_pinglist_sec = 10

; speed that agents sync with controller via http (default: 60 seconds)
; Note that this sync interval must be large enough for a large scale cluster
; to avoid tcp socket's TIME_WAIT. The default duration of TIME_WAIT is 60 seconds.
; So, we sync every 60 seconds.
interval_sync_pinglist_sec = 10

; speed that agents report to controller (default: 10 * 1000 milliseconds)
; If you want to set the report interval larger than 60 seconds, increase the macro 
; "INTERVAL_PLOTTER_FILTER_OLD_DATA_SEC" in src/macro.py.
interval_report_ping_result_millisec = 10000

; speed that each agent send a ping packet (default: 1 * 1000000 microseconds)
interval_send_ping_ib_microsec = 100000
interval_send_ping_roce_microsec = 100000
interval_send_ping_tcp_microsec = 100000
interval_send_ping_udp_microsec = 100000

; traffic class (DHCP value) of IB (default: 0) and RoCEv2 (default: 106)
traffic_class_ib = 0
traffic_class_roce = 106

; protocol to send ping result: zmq (ZeroMQ), http. 
; Note that http is a default protocol for the control plane. 
; For the low latency report, zmq is recommended .
protocol_to_report_result = zmq

; polling interval of cqe/sock events. 
; 0 = event-driven mode which is blocking mode.
; Note that the blocking mode yields a bit high latency in event polling, and 
; the performance depends on ping frequency.
interval_poll_event_udp_microsec = 0
; interval_poll_event_rdma_microsec = 0


; logging configs {TRACE, DEBUG, INFO, WARN, ERROR, CRITICAL}
; capital is acceptable.
[logging]
; RDMA (IB & RoCE)
logger_cpp_process_rdma_server = info
logger_cpp_process_rdma_client = info
logger_cpp_process_rdma_result = info
logger_cpp_process_rdma_ping_table = info
; UDP
logger_cpp_process_udp_server = info
logger_cpp_process_udp_client = info
logger_cpp_process_udp_result = info
logger_cpp_process_udp_ping_table = info
; TCP
logger_cpp_process_tcp_server = info
logger_cpp_process_tcp_client = info
logger_cpp_process_tcp_result = info
logger_cpp_process_tcp_ping_table = info
; Common
logger_ipc_process_producer = info
logger_ipc_process_consumer = info